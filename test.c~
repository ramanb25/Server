#include<stdio.h>
#include<string.h>    //strlen
#include<sys/socket.h>
#include<arpa/inet.h> //inet_addr
#include<omp.h>
//#include<bits/stdc++.h>
#define par true
#define num_threads 4
int main()
{   //freopen("input.txt", "w", stdout);
        int i=0;
  //      #pragma openmp parallel
int j=0;
double aa,ab;
  //  printf("dvv\n");
//aa=clock();
///#pragma openmp parallel
//if(par)
//fork();
//printf("%d\n",getpid());
//if(par)

//fork();
aa=clock();
        for(;i<16;i++){
       //     printf("dvv\n");
    int socket_desc, c, s, r;
    struct sockaddr_in server;
    char *message, server_reply[2000];
     
    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket");
    }
        if(1){ 
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_family = AF_INET;
	
    server.sin_port = htons( 9999 );}
else {


    server.sin_addr.s_addr = inet_addr("192.168.43.190");
    server.sin_family = AF_INET;

 server.sin_port = htons( 9999 );}
     //printf("dvv\n");
    //Connect to remote server
    //while(1){
    c=connect(socket_desc , (struct sockaddr *)&server , sizeof(server));
    //printf("dvv\n");
   // printf("\nc=%d\n",c);
   message="POST /home.html?raman=raman yup/1.1\nHost: localhost:9997\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: en-US,en;q=0.8";
    write(socket_desc , message , strlen(message));
    //printf("dvv\n");
    if (c < 0)
    {  // printf("dvv\n");
        puts("connect error");
        return 1;
    }
     
   // puts("Connected\n");
	j++;
     int i,a;
    //Receive a reply from the server
 //   while(1){
     // for(i = 0 ; i < 2000 ; i++)
    //server_reply[i] = '\0';
      read(socket_desc, server_reply , 2000);
      //printf("jnl\n");
      //if(server_reply[0] == 'e' && server_reply[1] == 'x' && server_reply[2] == 'i' && server_reply[3] == 't')
    //break;
    //  printf("The server reply is: %s\n",server_reply);
 ab=clock();
        printf("Serial Request=%d %f\n",j,ab-aa);
}
    //fflush(stdout);
//





double serial=ab-aa;









fork();
////if(par)

fork();
fork();
fork();
i=0;
        for(;i<1;i++){
            aa=clock();
          //  printf("dvv\n");
    int socket_desc, c, s, r;
    struct sockaddr_in server;
    char *message, server_reply[2000];
     
    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket");
    }
        if(getpid()%2==0){ 
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_family = AF_INET;
    
    server.sin_port = htons( 9999 );}
else if(getpid()%3==1) {


    server.sin_addr.s_addr = inet_addr("192.168.43.190");
    server.sin_family = AF_INET;

 server.sin_port = htons( 9998 );}
 else if(getpid()%3==2) {


    server.sin_addr.s_addr = inet_addr("192.168.43.26");
    server.sin_family = AF_INET;

 server.sin_port = htons( 9999 );}
     //printf("dvv\n");
    //Connect to remote server
    //while(1){
    c=connect(socket_desc , (struct sockaddr *)&server , sizeof(server));
    //printf("dvv\n");
   // printf("\nc=%d\n",c);
   message="POST /home.html?raman=raman yup/1.1\nHost: localhost:9997\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: en-US,en;q=0.8";
    write(socket_desc , message , strlen(message));
    //printf("dvv\n");
    if (c < 0)
    {  // printf("dvv\n");
        puts("connect error");
        return 1;
    }
     
   // puts("Connected\n");
    j++;
     int i,a;
    //Receive a reply from the server
 //   while(1){
     // for(i = 0 ; i < 2000 ; i++)
    //server_reply[i] = '\0';
      read(socket_desc, server_reply , 2000);
      //printf("jnl\n");
      //if(server_reply[0] == 'e' && server_reply[1] == 'x' && server_reply[2] == 'i' && server_reply[3] == 't')
    //break;
    //  printf("The server reply is: %s\n",server_reply);
 ab=clock();
        printf("Parallel Request=%f\n",ab-aa);
        double parallel=ab-aa;


        printf("\nSpeed Up%f\n\n\n",serial/parallel);
        fflush(stdout);
}


     // printf("%d %f\n",j,ab-aa);
//}
    //fflush(stdout); // printf("%d %f\n",j,ab-aa);
    //fflush(stdout);
      // printf("%f\n",(ab-aa));



    // printf("%d %f\n",j,ab-aa);
//    //fflush(stdout); // printf("%d %f\n",j,ab-aa);
//}
    //fflush(stdout); // printf("%d %f\n",j,ab-aa);
//}
    //fflush(stdout); // printf("%d %f\n",j,ab-aa);
///}
    //fflush(stdout);
 //  else printf("%d",num_threads*(ab-aa));
        //printf("%d %f\n",j,ab-aa);
    
    
    /* r=recv(socket_desc, server_reply , 2000 , 0);
    printf("\nr=%d\n",r);
    if( r < 0)
    {
        puts("recv failed");
    }*/
    //puts("Reply received\n");
    //puts(server_reply);

        int jj=0;
       for(jj=0;jj<1000000000000;jj++){int nn;;}
    return 0;
}
