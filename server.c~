/* simple-server.c
 *
 * Copyright (c) 2000 Sean Walton and Macmillan Publishers.  Use may be in
 * whole or in part in accordance to the General Public License (GPL).
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
*/

/*****************************************************************************/
/*** simple-server.c                                                       ***/
/***                                                                       ***/
/*****************************************************************************/

/**************************************************************************
*	This is a simple echo server.  This demonstrates the steps to set up
*	a streaming server.
**************************************************************************/
#include <stdio.h>
#include <errno.h>
#include <sys/socket.h>
#include <resolv.h>
#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#define MY_PORT		9999
#define MAXBUF		1024

static int dbg=0;
void debug(){
	dbg++;
	printf("Debug:%d\n\n",dbg);
	fflush(stdin);
}

int send_image(int socket){

   FILE *picture;
   int size, read_size, stat, packet_index;
   char send_buffer[10240], read_buffer[256];
   packet_index = 1;

   picture = fopen("capture.jpeg", "r");
   printf("Getting Picture Size\n");   

   if(picture == NULL) {
        printf("Error Opening Image File"); } 

   fseek(picture, 0, SEEK_END);
   size = ftell(picture);
   fseek(picture, 0, SEEK_SET);
   printf("Total Picture size: %i\n",size);

   //Send Picture Size
   printf("Sending Picture Size\n");
   write(socket, (void *)&size, sizeof(int));

   //Send Picture as Byte Array
   printf("Sending Picture as Byte Array\n");

   do { //Read while we get errors that are due to signals.
      stat=read(socket, &read_buffer , 255);
      printf("Bytes read: %i\n",stat);
   } while (stat < 0);

   printf("Received data in socket\n");
   printf("Socket data: %c\n", read_buffer);

   while(!feof(picture)) {
   //while(packet_index = 1){
      //Read from the file into our send buffer
      read_size = fread(send_buffer, 1, sizeof(send_buffer)-1, picture);

      //Send data through our socket 
      do{
        stat = write(socket, send_buffer, read_size);  
      }while (stat < 0);

      printf("Packet Number: %i\n",packet_index);
      printf("Packet Size Sent: %i\n",read_size);     
      printf(" \n");
      printf(" \n");


      packet_index++;  

      //Zero out our send buffer
      bzero(send_buffer, sizeof(send_buffer));
     }
    }


int Parsefile(char* req, char* file){
	debug();
	printf("req= %s\n\n\n\n",req);
	char* gethost = strstr(req, "/");
	if(gethost!=NULL){
		
		debug();
		printf("gethost=%s\n\n\n\n",gethost);
		int i=0;
		int len=strlen(gethost);
		for(i=0;i<len;i++){
			//printf("char= %c\n\n\n",gethost[i]);
			if(gethost[i]==' ')
				break;
		}
		memcpy( file, gethost, i );
		return 1;	
	}else return -1;

}

int get_filetype(char* filename, char* filetype){
	if (strstr(filename, ".html"))
	    strcpy(filetype, "text/html");
    	else if (strstr(filename, ".gif"))
    		strcpy(filetype, "image/gif");
   	else if (strstr(filename, ".jpg"))
   	 	strcpy(filetype, "image/jpeg");
   	else
		strcpy(filetype, "text/plain");
}

/* Read the contents of FILENAME into a newly-allocated buffer.  The
   size of the buffer is stored in *LENGTH.  Returns the buffer, which
   the caller must free.  If FILENAME doesn't correspond to a regular
   file, returns NULL.  */

char* read_file (char* filename, size_t* length)
{
  int fd;
  struct stat file_info;
  char* buffer;

  /* Open the file.  */
  fd = open (++filename, O_RDONLY);

	debug();
	printf("%s\n",filename);

  /* Get information about the file.  */
  fstat (fd, &file_info);
  *length = file_info.st_size;
  /* Make sure the file is an ordinary file.  */

	debug();
	printf("%d\n",*length);
 

  /* Allocate a buffer large enough to hold the file's contents.  */
  buffer = (char*) malloc (*length);
  /* Read the file into the buffer.  */
  read (fd, buffer, *length);

  debug();
  printf("File=%s\n",buffer);

  /* Finish up.  */
  close (fd);
  return buffer;
}


int main(int Count, char *Strings[])
{   int sockfd;
	struct sockaddr_in self;
	char buffer[MAXBUF];

	/*---Create streaming socket---*/
    if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0 )
	{
		perror("Socket");
		exit(errno);
	}
	int my_port;
	scanf("%d",&my_port);
	/*---Initialize address/port structure---*/
	bzero(&self, sizeof(self));
	self.sin_family = AF_INET;
	self.sin_port = htons(my_port);
	self.sin_addr.s_addr = INADDR_ANY;

	/*---Assign a port number to the socket---*/
    if ( bind(sockfd, (struct sockaddr*)&self, sizeof(self)) != 0 )
	{
		perror("socket--bind");
		exit(errno);
	}

	/*---Make it a "listening socket"---*/
	if ( listen(sockfd, 20) != 0 )
	{
		perror("socket--listen");
		exit(errno);
	}

	/*---Forever... ---*/
	while (1)
	{	int clientfd;
		struct sockaddr_in client_addr;
		int addrlen=sizeof(client_addr);

		/*---accept a connection (creating a data pipe)---*/
		clientfd = accept(sockfd, (struct sockaddr*)&client_addr, &addrlen);
		printf("%s:%d connected\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
		FILE *fp;
		   char* buff,buf;

		
		buff="HTTP/1.0 200 OK\r\nServer:Web Server\r\nContent-Type: text/html; charset=UTF-8\r\n\n<html><head><title>test</title></head><body><img align=\"middle\" src=\"home.jpg\"> Raman Bansal</body></html>";

		char *head = "HTTP/1.0 200 OK\r\nServer:Web Server\r\nContent-Type: ";
	char *tail="; charset=UTF-8\r\n\n<html><head><title>test</title></head><body><img align=\"middle\" src=\"home.jpg\"> Raman Bansal</body></html>";
	char reply[1000];

		
		/*---Echo back anything sent---*/
		recv(clientfd, buffer, MAXBUF, 0);



		//parse filepath
		char *filename;
		char filepath[1000];
		Parsefile(buffer,&filepath);
		debug();
		printf("filepath %s\n",filepath);		


		//parse filetype
		char filetype[1000];
		get_filetype(filepath,&filetype);
		debug();
		printf("filetype %s\n",filetype);
		
		//reply
		size_t length;
		sprintf(reply,"%s%s%s%s",head,filetype,tail,read_file(filepath,&length));
		debug();
		printf("Reply=%s\n",reply);
		send(clientfd, reply, strlen(reply), 0);
		memset(filepath, 0, 1000);


		/*---Close data connection---*/
		close(clientfd);
	}

	/*---Clean up (should never get here!)---*/
	close(sockfd);
	return 0;
}

